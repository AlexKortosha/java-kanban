package com.yandex.app.test;

import com.yandex.app.model.*;
import com.yandex.app.service.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;

class InMemoryTaskManagerTest {
    private TaskManager taskManager;

    @BeforeEach
    void setUp() {
        taskManager = Managers.getDefault();
    }

    @Test
    void shouldAddAndFindAllTaskTypes() {
        // Добавляем задачи
        Task task = taskManager.addTask(new Task(0, "Task", "Description"));
        Epic epic = taskManager.addEpic(new Epic(0, "Epic", "Epic description"));
        SubTask subTask = taskManager.addSubTask(new SubTask(0, "Subtask",
                "Subtask description", epic.getId()));


        assertEquals(1, taskManager.getAllTasks().size(), "Неверное количество задач");
        assertEquals(1, taskManager.getAllEpics().size(), "Неверное количество эпиков");
        assertEquals(1, taskManager.getAllSubtasks().size(), "Неверное количество подзадач");


        assertNotNull(taskManager.findTaskById(task.getId()), "Не найдена задача");
        assertNotNull(taskManager.findEpicById(epic.getId()), "Не найден эпик");
        assertNotNull(taskManager.findSubTaskById(subTask.getId()), "Не найдена подзадача");


        assertEquals(task, taskManager.findTaskById(task.getId()), "Найденная задача не совпадает");
        assertEquals(epic, taskManager.findEpicById(epic.getId()), "Найденный эпик не совпадает");
        assertEquals(subTask, taskManager.findSubTaskById(subTask.getId()), "Найденная подзадача не совпадает");


        assertEquals(epic.getId(), subTask.getEpicId(), "Подзадача не связана с эпиком");
        assertTrue(taskManager.getSubTasksByEpicId(epic.getId()).contains(subTask),
                "Эпик не содержит свою подзадачу");
    }


    @Test
    void shouldNotFindNonExistentTasks() {
        assertNull(taskManager.findTaskById(22), "айдена несуществующая задача");
        assertNull(taskManager.findEpicById(22), "Найден несуществующий эпик");
        assertNull(taskManager.findSubTaskById(22), "Найдена несуществующая подзадача");
    }
    //ПРОВЕРКА НА ЗАДАНЫЕ И СГЕНЕРИРОВАННЫЕ ID==========================================================================


    @Test
    void shouldHandleMixedIdAssignmentWithoutConflicts() {

        Task taskWithFixId = new Task(10, "Task", "Description");
        taskManager.addTask(taskWithFixId);

        Task autoGeneratedTask1 = taskManager.addTask(new Task(0, "Auto 1", "Desc"));
        Task autoGeneratedTask2 = taskManager.addTask(new Task(0, "Auto 2", "Desc"));

        assertEquals(10, taskWithFixId.getId(), "заданный ID должен сохраниться");

        assertNotEquals(10, autoGeneratedTask1.getId(), "Авто-ID не должно совпадать с явным");
        assertNotEquals(10, autoGeneratedTask2.getId(), "Авто-ID не должно совпадать с явным");

        assertEquals(3, taskManager.getAllTasks().size(), "Все задачи должны быть сохранены");

        assertNotNull(taskManager.findTaskById(10), "Задача с явным ID должна быть найдена");
        assertNotNull(taskManager.findTaskById(autoGeneratedTask1.getId()), "Задача с ID 1 должна быть найдена");
        assertNotNull(taskManager.findTaskById(autoGeneratedTask2.getId()), "Задача с ID 2 должна быть найдена");
    }

    //ПРОВЕРКА НА НЕИЗМЕННОСТЬ ЗАДАЧИ===================================================================================

    
    @Test
    void taskShouldRemainUnmodifiedWhenAddedToManager() {
        Task originalTask = new Task(0, "Original", "Original description");
        originalTask.setStatus(TaskStatus.IN_PROGRESS);

        String originalName = originalTask.getName();
        String originalDescription = originalTask.getDescription();
        TaskStatus originalStatus = originalTask.getStatus();

        Task addedTask = taskManager.addTask(originalTask);

        assertNotEquals(0, addedTask.getId(), "ID должен быть сгенерирован");

        assertEquals(originalName, addedTask.getName(), "Название не должно изменяться");
        assertEquals(originalDescription, addedTask.getDescription(), "Описание не должно изменяться");
        assertEquals(originalStatus, addedTask.getStatus(), "Статус не должен изменяться");

        assertEquals(0, originalTask.getId(), "Оригинальный ID должен остаться 0");
        assertEquals(originalName, originalTask.getName(), "Оригинальное название не должно изменяться");
        assertEquals(originalDescription, originalTask.getDescription(),
                "Оригинальное описание не должно изменяться");
        assertEquals(originalStatus, originalTask.getStatus(), "Оригинальный статус не должен изменяться");
    }

}